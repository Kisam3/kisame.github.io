/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source visit the plugins github repository
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => FolderColorPlugin
});
var import_obsidian3 = __toModule(require("obsidian"));

// src/settings.ts
var DEFAULT_SETTINGS = {
  debug: true,
  hierarchicalMode: true
};

// src/util.ts
var folderClassName = "obsidian-color-folder";
var addColorsToDOM = (plugin, data, registeredFileExplorers) => {
  const fileExplorers = plugin.app.workspace.getLeavesOfType("file-explorer");
  fileExplorers.forEach((fileExplorer) => {
    if (registeredFileExplorers.has(fileExplorer)) {
    }
    registeredFileExplorers.set(fileExplorer, true);
    const method1 = plugin.getSettings().hierarchicalMode;
    if (method1) {
      var fileNames = Object.getOwnPropertyNames(fileExplorer.view.fileItems);
      for (let item of fileNames) {
        var hasColor = false;
        var dataKey = "";
        data.forEach(([key, value]) => {
          if (item.startsWith(key)) {
            hasColor = true;
            dataKey = value;
          }
        });
        if (hasColor) {
          const fileItem = fileExplorer.view.fileItems[item];
          const titleEl = fileItem.titleEl;
          const titleInnerEl = fileItem.titleInnerEl;
          applyStyleToElement(titleEl, titleInnerEl, dataKey);
        }
      }
    } else {
      data.forEach(([key, value]) => {
        const fileItem = fileExplorer.view.fileItems[key];
        if (fileItem) {
          const titleEl = fileItem.titleEl;
          const titleInnerEl = fileItem.titleInnerEl;
          applyStyleToElement(titleEl, titleInnerEl, value);
        }
      });
    }
  });
};
var applyStyleToElement = (parentElement, insertBefore, color) => {
  let iconNode = null;
  if (!parentElement) {
    iconNode = document.createElement("div");
  } else {
    iconNode = parentElement.createDiv();
  }
  iconNode.classList.add(folderClassName);
  const insertIcon = false;
  if (insertIcon) {
    iconNode.innerHTML = `<div style="width: 10px; height: 10px; margin-top: 8px; background-color: ${color}">&nbsp;</div>`;
  }
  parentElement.insertBefore(iconNode, insertBefore);
  parentElement.setAttribute("style", `color: ${color}`);
};
var removeFromDOM = (path) => {
  const node = document.querySelector(`[data-path="${path}"]`);
  if (!node) {
    console.error("element with data path not found", path);
    return;
  }
  const iconNode = node.querySelector("." + folderClassName);
  if (!iconNode) {
    console.error("icon element does not exist", path);
    return;
  }
  iconNode.nextElementSibling.removeAttribute("style");
  iconNode.remove();
};
var addToDOM = (path, color) => {
  const node = document.querySelector(`[data-path="${path}"]`);
  if (!node) {
    console.error("element with data path not found", path);
    return;
  }
  let titleNode = node.querySelector(".nav-folder-title-content");
  if (!titleNode) {
    titleNode = node.querySelector(".nav-file-title-content");
    if (!titleNode) {
      console.error("element with title not found");
      return;
    }
  }
  applyStyleToElement(node, titleNode, color);
};

// src/colorPickerModal.ts
var import_obsidian = __toModule(require("obsidian"));
var ColorPickerModal1 = class extends import_obsidian.Modal {
  constructor(app, plugin, path, color) {
    super(app);
    this.plugin = plugin;
    this.path = path;
    this.color = color;
    this.containerEl.addClass("obsidian-color-folder-modal");
  }
  onOpen() {
    const { contentEl } = this;
    this.display(true);
  }
  onClose() {
    const { contentEl } = this;
    const col = this.color;
    addToDOM(this.path, col);
    this.plugin.addFolderColor(this.path, col);
    contentEl.empty();
  }
  display(focus) {
    return __async(this, null, function* () {
      const { contentEl } = this;
      contentEl.empty();
      let titleInput;
      const titleSetting = new import_obsidian.Setting(contentEl);
      titleSetting.setName("Color").setDesc("Leave blank to render without a title.").addText((t) => {
        titleInput = t;
        t.setValue(this.color);
        t.onChange((v) => {
          this.color = v;
        });
        titleInput.inputEl.onkeydown = (evt) => {
          evt.key == "Enter" && this.close();
        };
      });
      new import_obsidian.Setting(contentEl).addButton((b) => b.setButtonText("Insert").setCta().onClick(() => {
        this.close();
      })).addExtraButton((b) => {
        b.setIcon("cross").setTooltip("Cancel").onClick(() => this.close());
        b.extraSettingsEl.setAttr("tabindex", 0);
        b.extraSettingsEl.onkeydown = (evt) => {
          evt.key == "Enter" && this.close();
        };
      });
      if (focus) {
        titleInput.inputEl.focus();
      }
    });
  }
};

// src/folderColorSettingsTab.ts
var import_obsidian2 = __toModule(require("obsidian"));
var FolderColorSettingsTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Colored Folder Settings" });
    new import_obsidian2.Setting(containerEl).setName("Hierarchical Mode").setDesc("In `Hierarchical Mode`, child folders are colored based on parent settings.").addToggle((toggle) => {
      toggle.setValue(this.plugin.getSettings().hierarchicalMode).onChange((val) => __async(this, null, function* () {
        this.plugin.getSettings().hierarchicalMode = val;
        yield this.plugin.saveFolderColorData();
        this.plugin.handleChangeLayout();
      }));
    });
  }
};

// src/main.ts
var FolderColorPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.registeredFileExplorers = new WeakMap();
  }
  onload() {
    return __async(this, null, function* () {
      console.log("loading obsidian-color-folder");
      yield this.loadFolderColorData();
      this.app.workspace.onLayoutReady(() => this.handleChangeLayout());
      this.registerEvent(this.app.workspace.on("layout-change", () => this.handleChangeLayout()));
      this.handleChangeLayout();
      this.registerEvent(this.app.workspace.on("file-menu", (menu, file) => {
        const addColorMenuItem = (item) => {
          item.setTitle("Change color");
          item.onClick(() => {
            let currentColor = "";
            if (this.data[file.path]) {
              currentColor = this.data[file.path];
            }
            const modal = new ColorPickerModal1(this.app, this, file.path, currentColor);
            modal.open();
          });
        };
        const removeColorMenuItem = (item) => {
          item.setTitle("Remove color");
          item.onClick(() => {
            this.removeFolderColor(file.path);
            removeFromDOM(file.path);
          });
        };
        menu.addItem(addColorMenuItem);
        menu.addItem(removeColorMenuItem);
      }));
      this.registerEvent(this.app.vault.on("delete", (file) => {
        const path = file.path;
        this.removeFolderColor(path);
      }));
      this.registerEvent(this.app.vault.on("rename", (file, oldPath) => {
        this.renameFolder(file.path, oldPath);
      }));
      this.addSettingTab(new FolderColorSettingsTab(this.app, this));
    });
  }
  handleChangeLayout() {
    const data = Object.entries(this.data);
    addColorsToDOM(this, data, this.registeredFileExplorers);
  }
  save() {
  }
  onunload() {
    console.log("unloading obsidian-color-folder");
  }
  renameFolder(newPath, oldPath) {
    if (!this.data[oldPath] || newPath === oldPath) {
      return;
    }
    Object.defineProperty(this.data, newPath, Object.getOwnPropertyDescriptor(this.data, oldPath));
    delete this.data[oldPath];
    this.saveFolderColorData();
  }
  removeFolderColor(path) {
    if (!this.data[path]) {
      return;
    }
    delete this.data[path];
    this.saveFolderColorData();
  }
  addFolderColor(path, color) {
    if (this.data[path]) {
      removeFromDOM(path);
    }
    this.data[path] = color;
    this.saveFolderColorData();
    this.handleChangeLayout();
  }
  getSettings() {
    return this.data.settings;
  }
  loadFolderColorData() {
    return __async(this, null, function* () {
      const data = yield this.loadData();
      this.data = Object.assign({ settings: __spreadValues({}, DEFAULT_SETTINGS) }, {}, data);
    });
  }
  saveFolderColorData() {
    return __async(this, null, function* () {
      yield this.saveData(this.data);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3NldHRpbmdzLnRzIiwgInNyYy91dGlsLnRzIiwgInNyYy9jb2xvclBpY2tlck1vZGFsLnRzIiwgInNyYy9mb2xkZXJDb2xvclNldHRpbmdzVGFiLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBBcHAsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBNb2RhbCwgTm90aWNlLCBQbHVnaW4sIE1lbnVJdGVtLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgREVGQVVMVF9TRVRUSU5HUywgRm9sZGVyQ29sb3JTZXR0aW5ncyB9IGZyb20gJy4vc2V0dGluZ3MnO1xuaW1wb3J0IHsgYWRkQ29sb3JzVG9ET00sIHJlbW92ZUZyb21ET00gfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHsgQ29sb3JQaWNrZXJNb2RhbCwgQ29sb3JQaWNrZXJNb2RhbDEgfSBmcm9tICcuL2NvbG9yUGlja2VyTW9kYWwnO1xuaW1wb3J0IEZvbGRlckNvbG9yU2V0dGluZ3NUYWIgZnJvbSBcIi4vZm9sZGVyQ29sb3JTZXR0aW5nc1RhYlwiO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvbGRlckNvbG9yUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0cHJpdmF0ZSBkYXRhOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBPYmplY3Q+O1xuXHRwcml2YXRlIHJlZ2lzdGVyZWRGaWxlRXhwbG9yZXJzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0Y29uc29sZS5sb2coJ2xvYWRpbmcgb2JzaWRpYW4tY29sb3ItZm9sZGVyJyk7XG5cblx0XHQvL0xvYWQgdGhlIGNvbG9yIGRhdGEgZnJvbSB0aGUgc2V0dGluZ3MgKC5vYnNpZGlhbi9wbHVnaW5zLylcblx0XHRhd2FpdCB0aGlzLmxvYWRGb2xkZXJDb2xvckRhdGEoKTtcblxuXHRcdC8vUmVnaXN0ZXIgZm9yIGxheW91dCBjaGFuZ2VzLlxuXHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbkxheW91dFJlYWR5KCgpID0+IHRoaXMuaGFuZGxlQ2hhbmdlTGF5b3V0KCkpO1xuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2xheW91dC1jaGFuZ2UnLCAoKSA9PiB0aGlzLmhhbmRsZUNoYW5nZUxheW91dCgpKSk7XG5cdFx0dGhpcy5oYW5kbGVDaGFuZ2VMYXlvdXQoKTtcblxuXHRcdC8vUmVnaXN0ZXIgdGhlIGNvbnRleHQgbWVudSBjb21tYW5kcy5cblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXG5cdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2ZpbGUtbWVudScsIChtZW51LCBmaWxlKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGFkZENvbG9yTWVudUl0ZW0gPSAoaXRlbTogTWVudUl0ZW0pID0+IHtcblx0XHRcdFx0XHRpdGVtLnNldFRpdGxlKCdDaGFuZ2UgY29sb3InKTtcblx0XHRcdFx0XHQvL2l0ZW0uc2V0SWNvbignaGFzaHRhZycpO1xuXHRcdFx0XHRcdGl0ZW0ub25DbGljaygoKSA9PiB7XG5cdFx0XHRcdFx0XHRsZXQgY3VycmVudENvbG9yID0gXCJcIjtcblx0XHRcdFx0XHRcdGlmICh0aGlzLmRhdGFbZmlsZS5wYXRoXSkge1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50Q29sb3IgPSA8c3RyaW5nPnRoaXMuZGF0YVtmaWxlLnBhdGhdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y29uc3QgbW9kYWwgPSBuZXcgQ29sb3JQaWNrZXJNb2RhbDEodGhpcy5hcHAsIHRoaXMsIGZpbGUucGF0aCwgY3VycmVudENvbG9yKTtcblx0XHRcdFx0XHRcdG1vZGFsLm9wZW4oKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvL1JlbW92ZSB0aGUgY29sb3IgY29tbWFuZC5cblx0XHRcdFx0Y29uc3QgcmVtb3ZlQ29sb3JNZW51SXRlbSA9IChpdGVtOiBNZW51SXRlbSkgPT4ge1xuXHRcdFx0XHRcdGl0ZW0uc2V0VGl0bGUoJ1JlbW92ZSBjb2xvcicpO1xuXHRcdFx0XHRcdC8vaXRlbS5zZXRJY29uKCd0cmFzaCcpO1xuXHRcdFx0XHRcdGl0ZW0ub25DbGljaygoKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLnJlbW92ZUZvbGRlckNvbG9yKGZpbGUucGF0aCk7XG5cdFx0XHRcdFx0XHRyZW1vdmVGcm9tRE9NKGZpbGUucGF0aCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0bWVudS5hZGRJdGVtKGFkZENvbG9yTWVudUl0ZW0pO1xuXHRcdFx0XHRtZW51LmFkZEl0ZW0ocmVtb3ZlQ29sb3JNZW51SXRlbSk7XG5cdFx0XHR9KSxcblx0XHQpO1xuXG5cdFx0Ly9SZWdpc3RlciBmb3IgZmlsZSBkZWxldGlvbnMuXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KFxuXHRcdFx0dGhpcy5hcHAudmF1bHQub24oJ2RlbGV0ZScsIChmaWxlKSA9PiB7XG5cdFx0XHRcdC8vRGVsZXRlIHRoZSBwYXRoIGZyb20gdGhlIHN0b3JlZCBkYXRhXG5cdFx0XHRcdGNvbnN0IHBhdGggPSBmaWxlLnBhdGg7XG5cdFx0XHRcdHRoaXMucmVtb3ZlRm9sZGVyQ29sb3IocGF0aCk7XG5cdFx0XHR9KSxcblx0XHQpO1xuXG5cdFx0Ly9SZWdpc3RlciBmb3IgZmlsZSBjaGFuZ2VzLlxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcblx0XHRcdHRoaXMuYXBwLnZhdWx0Lm9uKCdyZW5hbWUnLCAoZmlsZSwgb2xkUGF0aCkgPT4ge1xuXHRcdFx0XHR0aGlzLnJlbmFtZUZvbGRlcihmaWxlLnBhdGgsIG9sZFBhdGgpO1xuXHRcdFx0fSksXG5cdFx0KTtcblxuXHRcdC8vQWRkIGEgc2V0dGluZ3MgdGFiLlxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgRm9sZGVyQ29sb3JTZXR0aW5nc1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXHR9XG5cblx0Ly9NZXRob2QgY2FsbGVkIHdoZW4gdGhlIGxheW91dCBjaGFuZ2VzLlxuXHRwdWJsaWMgaGFuZGxlQ2hhbmdlTGF5b3V0KCk6IHZvaWQge1xuXHRcdC8vY29uc29sZS5sb2coJ29ic2lkaWFuLWNvbG9yLWZvbGRlciBoYW5kbGluZyBsYXlvdXQgY2hhbmdlJyk7XG5cdFx0Y29uc3QgZGF0YSA9IE9iamVjdC5lbnRyaWVzKHRoaXMuZGF0YSkgYXMgW3N0cmluZywgc3RyaW5nXTtcblx0XHQvL0FkZCBhbGwgY29sb3IgdG8gdGhlIERPTSBmb3IgYW55IG5ldyBmaWxlIGV4cGxvcmVycy5cblx0XHRhZGRDb2xvcnNUb0RPTSh0aGlzLCBkYXRhLCB0aGlzLnJlZ2lzdGVyZWRGaWxlRXhwbG9yZXJzKTtcblx0fVxuXG5cdHB1YmxpYyBzYXZlKCk6IHZvaWQge1xuXG5cdH1cblxuXHQvL0NhbGxlZCB3aGVuIHRoZSBwbHVnaW4gaXMgZG93bmxvYWRlZC5cblx0b251bmxvYWQoKSB7XG5cdFx0Y29uc29sZS5sb2coJ3VubG9hZGluZyBvYnNpZGlhbi1jb2xvci1mb2xkZXInKTtcblx0fVxuXG5cdC8vQ2FsbGVkIHdoZW4gYSBmaWxlIGlzIHJlbmFtZWQuXG5cdHJlbmFtZUZvbGRlcihuZXdQYXRoOiBzdHJpbmcsIG9sZFBhdGg6IHN0cmluZyk6IHZvaWQge1xuXHRcdC8vQ2hlY2sgdGhlIHBhdGggaGFzIGFjdHVhbGx5IGNoYW5nZWQsIGFuZCB0aGF0IHdlJ3ZlIGdvdCBhIHN0b3JlZCBjb2xvciBmb3IgaXQuIFxuXHRcdGlmICghdGhpcy5kYXRhW29sZFBhdGhdIHx8IG5ld1BhdGggPT09IG9sZFBhdGgpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvL0FkZCB0aGUgbmV3IHBhdGggdG8gb3VyIHN0b3JlZCBkYXRhLiBcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5kYXRhLCBuZXdQYXRoLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMuZGF0YSwgb2xkUGF0aCkpO1xuXHRcdC8vUmVtb3ZlIHRoZSBvbGQgcGF0aCBmcm9tIG91ciBzdG9yZWQgZGF0YS4gXG5cdFx0ZGVsZXRlIHRoaXMuZGF0YVtvbGRQYXRoXTtcblx0XHQvL1N0b3JlIHRoZSBmb2xkZXIgY29sb3IgZGF0YS5cblx0XHR0aGlzLnNhdmVGb2xkZXJDb2xvckRhdGEoKTtcblx0fVxuXG5cdC8vQ2FsbGVkIHdoZW4gdGhlIGNvbnRleHQgbWVudSBpcyBjbGlja2VkIHRvIHJlbW92ZSBjb2xvciBkYXRhLlxuXHRyZW1vdmVGb2xkZXJDb2xvcihwYXRoOiBzdHJpbmcpOiB2b2lkIHtcblx0XHQvL0NoZWNrIHdlJ3ZlIGdvdCBjb2xvciBkYXRhIGZvciB0aGlzIHBhdGguXG5cdFx0aWYgKCF0aGlzLmRhdGFbcGF0aF0pIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvL0lmIHdlIGRvLCBkZWxldGUgaXQuXG5cdFx0ZGVsZXRlIHRoaXMuZGF0YVtwYXRoXTtcblx0XHQvL1NhdmUgY2hhbmdlcyB0byB0aGUgY29sb3IgZGF0YS4gXG5cdFx0dGhpcy5zYXZlRm9sZGVyQ29sb3JEYXRhKCk7XG5cdH1cblxuXHRhZGRGb2xkZXJDb2xvcihwYXRoOiBzdHJpbmcsIGNvbG9yOiBzdHJpbmcpOiB2b2lkIHtcblx0XHQvL0lmIHRoZXJlIGlzIGFscmVhZHkgYSBjb2xvciBmb3IgdGhpcyBwYXRoLlxuXHRcdGlmICh0aGlzLmRhdGFbcGF0aF0pIHtcblx0XHRcdC8vUmVtb3ZlIGFueSBleGlzdGluZyBjb2xvciBmcm9tIHRoZSBndWkuXG5cdFx0XHRyZW1vdmVGcm9tRE9NKHBhdGgpO1xuXHRcdH1cblxuXHRcdC8vU3RvcmUgdGhlIGNvbG9yIGluIHRoZSBkYXRhIG9iamVjdC5cblx0XHR0aGlzLmRhdGFbcGF0aF0gPSBjb2xvcjtcblx0XHQvL1NhdmUgdGhlIGNvbG9yIGRhdGEuIFxuXHRcdHRoaXMuc2F2ZUZvbGRlckNvbG9yRGF0YSgpO1xuXG5cdFx0dGhpcy5oYW5kbGVDaGFuZ2VMYXlvdXQoKTtcblx0fVxuXG5cdHB1YmxpYyBnZXRTZXR0aW5ncygpOiBGb2xkZXJDb2xvclNldHRpbmdzIHtcblx0XHRyZXR1cm4gdGhpcy5kYXRhLnNldHRpbmdzIGFzIEZvbGRlckNvbG9yU2V0dGluZ3M7XG5cdH1cblxuXHRhc3luYyBsb2FkRm9sZGVyQ29sb3JEYXRhKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdC8vTG9hZCB0aGUgZm9sZGVyIGNvbG9yIGZyb20gdGhlIGZpbGUgc3lzdGVtLlxuXHRcdGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmxvYWREYXRhKCk7XG5cdFx0Ly9SZWFkIHRoZSBkYXRhIGludG8gdGhlIG9iamVjdC4gXG5cdFx0dGhpcy5kYXRhID0gT2JqZWN0LmFzc2lnbih7IHNldHRpbmdzOiB7IC4uLkRFRkFVTFRfU0VUVElOR1MgfSB9LCB7fSwgZGF0YSk7XG5cdH1cblxuXHRhc3luYyBzYXZlRm9sZGVyQ29sb3JEYXRhKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdC8vU2F2ZSB0aGUgZm9sZGVyIGNvbG9yIGRhdGEgb2JqZWN0LlxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5kYXRhKTtcblx0fVxuXG59XG4iLCAiZXhwb3J0IGludGVyZmFjZSBGb2xkZXJDb2xvclNldHRpbmdzIHtcbiAgICBkZWJ1ZzogYm9vbGVhbjtcbiAgICBoaWVyYXJjaGljYWxNb2RlOiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogRm9sZGVyQ29sb3JTZXR0aW5ncyA9IHtcbiAgICBkZWJ1ZzogdHJ1ZSxcbiAgICBoaWVyYXJjaGljYWxNb2RlOiB0cnVlXG59O1xuIiwgImltcG9ydCB7IEV4cGxvcmVyTGVhZiB9IGZyb20gJy4vLi4vQHR5cGVzL29ic2lkaWFuJztcbmltcG9ydCBJY29uQ29sb3JQbHVnaW4gZnJvbSAnLi9tYWluJztcblxuY29uc3QgZm9sZGVyQ2xhc3NOYW1lID0gXCJvYnNpZGlhbi1jb2xvci1mb2xkZXJcIjtcblxuZnVuY3Rpb24gZmluZEFsbE1ldGhvZHMob2JqOiBhbnkpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5maWx0ZXIoZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9ialtwcm9wZXJ0eV0gPT0gXCJmdW5jdGlvblwiO1xuICAgIH0pO1xufVxuXG5leHBvcnQgY29uc3QgYWRkQ29sb3JzVG9ET00gPSAocGx1Z2luOiBJY29uQ29sb3JQbHVnaW4sIGRhdGE6IFtzdHJpbmcsIHN0cmluZ10sIHJlZ2lzdGVyZWRGaWxlRXhwbG9yZXJzOiBXZWFrTWFwPEV4cGxvcmVyTGVhZiwgYm9vbGVhbj4sKSA9PiB7XG4gICAgLy9HZXQgdGhlIGZpbGUgZXhwbG9yZXIgaW5zdGFuY2VzLlxuICAgIGNvbnN0IGZpbGVFeHBsb3JlcnMgPSBwbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoJ2ZpbGUtZXhwbG9yZXInKTtcbiAgICAvL1dhbGsgdGhyb3VnaCB0aGVtLlxuICAgIGZpbGVFeHBsb3JlcnMuZm9yRWFjaCgoZmlsZUV4cGxvcmVyOiBhbnkpID0+IHtcbiAgICAgICAgLy9JZiB3ZSd2ZSBhbHJlYWR5IGRlYWx0IHdpdGggdGhpcyBmaWxlIGV4cGxvcmVyLCBza2lwLlxuICAgICAgICBpZiAocmVnaXN0ZXJlZEZpbGVFeHBsb3JlcnMuaGFzKGZpbGVFeHBsb3JlcikpIHtcbiAgICAgICAgICAgIC8vcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vU2V0IHRoZSBzdGF0ZSBmb3IgdGhlIGZpbGUgZXhwbG9yZXIgdG8gc2hvdyB3ZSd2ZSBkZWFsdCB3aXRoIGl0LiAgXG4gICAgICAgIHJlZ2lzdGVyZWRGaWxlRXhwbG9yZXJzLnNldChmaWxlRXhwbG9yZXIsIHRydWUpO1xuXG4gICAgICAgIGNvbnN0IG1ldGhvZDEgPSBwbHVnaW4uZ2V0U2V0dGluZ3MoKS5oaWVyYXJjaGljYWxNb2RlO1xuICAgICAgICBpZiAobWV0aG9kMSkge1xuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlRZUEU6IFwiICsgKHR5cGVvZiBmaWxlRXhwbG9yZXIudmlldy5maWxlSXRlbXMpKTtcbiAgICAgICAgICAgIC8vIHZhciBtZXRocyA9IGZpbmRBbGxNZXRob2RzKGZpbGVFeHBsb3Jlci52aWV3LmZpbGVJdGVtcylcbiAgICAgICAgICAgIHZhciBmaWxlTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhmaWxlRXhwbG9yZXIudmlldy5maWxlSXRlbXMpO1xuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBmaWxlTmFtZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGFzQ29sb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YUtleSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZGF0YS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uc3RhcnRzV2l0aChrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNDb2xvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhS2V5ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoaGFzQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9HZXQgdGhlIHRpdGxlIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVJdGVtID0gZmlsZUV4cGxvcmVyLnZpZXcuZmlsZUl0ZW1zW2l0ZW1dO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZUVsID0gZmlsZUl0ZW0udGl0bGVFbDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGl0bGVJbm5lckVsID0gZmlsZUl0ZW0udGl0bGVJbm5lckVsO1xuICAgICAgICAgICAgICAgICAgICBhcHBseVN0eWxlVG9FbGVtZW50KHRpdGxlRWwsIHRpdGxlSW5uZXJFbCwgZGF0YUtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy9XYWxrIHRocm91Z2ggdGhlIGRhdGEgdG8gc2V0LiBcbiAgICAgICAgICAgIGRhdGEuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgLy9HZXQgdGhlIGZpbGUgaXRlbSBmcm9tIHRoZSBrZXkuXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZUl0ZW0gPSBmaWxlRXhwbG9yZXIudmlldy5maWxlSXRlbXNba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZUl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy9HZXQgdGhlIHRpdGxlIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlRWwgPSBmaWxlSXRlbS50aXRsZUVsO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZUlubmVyRWwgPSBmaWxlSXRlbS50aXRsZUlubmVyRWw7XG5cbiAgICAgICAgICAgICAgICAgICAgYXBwbHlTdHlsZVRvRWxlbWVudCh0aXRsZUVsLCB0aXRsZUlubmVyRWwsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG59O1xuXG52YXIgYXBwbHlTdHlsZVRvRWxlbWVudCA9IChwYXJlbnRFbGVtZW50OiBFbGVtZW50LCBpbnNlcnRCZWZvcmU6IEVsZW1lbnQsIGNvbG9yOiBzdHJpbmcpID0+IHtcbiAgICBsZXQgaWNvbk5vZGU6IEhUTUxFbGVtZW50ID0gbnVsbDtcbiAgICBpZiAoIXBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgaWNvbk5vZGUgPSA8SFRNTEVsZW1lbnQ+ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpY29uTm9kZSA9IDxIVE1MRWxlbWVudD5wYXJlbnRFbGVtZW50LmNyZWF0ZURpdigpO1xuICAgIH1cblxuICAgIGljb25Ob2RlLmNsYXNzTGlzdC5hZGQoZm9sZGVyQ2xhc3NOYW1lKTtcbiAgICBjb25zdCBpbnNlcnRJY29uID0gZmFsc2U7XG4gICAgaWYgKGluc2VydEljb24pIHtcbiAgICAgICAgaWNvbk5vZGUuaW5uZXJIVE1MID0gYDxkaXYgc3R5bGU9XFxcIndpZHRoOiAxMHB4OyBoZWlnaHQ6IDEwcHg7IG1hcmdpbi10b3A6IDhweDsgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcn1cXFwiPiZuYnNwOzwvZGl2PmA7XG4gICAgfVxuICAgIHBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGljb25Ob2RlLCBpbnNlcnRCZWZvcmUpO1xuICAgIC8vYmVmb3JlIGlzIHRoZSB0aXRsZUlubmVyIEVsLiBJdCdzIGVpdGhlciBhIG5hdi1maWxlLXRpdGxlLWNvbnRlbnQsIG9yIGEgbmF2LWZvbGRlci10aXRsZS1jb250ZW50J1xuICAgIHBhcmVudEVsZW1lbnQuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgYGNvbG9yOiAke2NvbG9yfWApO1xufVxuXG5leHBvcnQgY29uc3QgcmVtb3ZlRnJvbURPTSA9IChwYXRoOiBzdHJpbmcpID0+IHtcbiAgICAvL0dldCBhbGwgdGhlIG5vZGVzIHRoYXQgbWF0Y2ggdGhlIHBhdGguIFxuICAgIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1wYXRoPVwiJHtwYXRofVwiXWApO1xuICAgIGlmICghbm9kZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdlbGVtZW50IHdpdGggZGF0YSBwYXRoIG5vdCBmb3VuZCcsIHBhdGgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy9HZXQgdGhlIG5vZGUgd2hpY2ggcmVwcmVzZW50cyB0aGUgY29sb3Igbm9kZS4gXG4gICAgY29uc3QgaWNvbk5vZGUgPSBub2RlLnF1ZXJ5U2VsZWN0b3IoJy4nICsgZm9sZGVyQ2xhc3NOYW1lKTtcbiAgICBpZiAoIWljb25Ob2RlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2ljb24gZWxlbWVudCBkb2VzIG5vdCBleGlzdCcsIHBhdGgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vUmVtb3ZlIHRoZSBub2RlLlxuICAgIGljb25Ob2RlLm5leHRFbGVtZW50U2libGluZy5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcbiAgICBpY29uTm9kZS5yZW1vdmUoKTtcblxufTtcblxuZXhwb3J0IGNvbnN0IGFkZFRvRE9NID0gKHBhdGg6IHN0cmluZywgY29sb3I6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgIC8vR2V0IHRoZSBpdGVtIHdpdGggdGhlIGRhdGEtcGF0aC5cbiAgICBjb25zdCBub2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtcGF0aD1cIiR7cGF0aH1cIl1gKTtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignZWxlbWVudCB3aXRoIGRhdGEgcGF0aCBub3QgZm91bmQnLCBwYXRoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvL0dldCB0aGUgdGl0bGUgbm9kZSBjb250YWluZXIuXG4gICAgbGV0IHRpdGxlTm9kZSA9IG5vZGUucXVlcnlTZWxlY3RvcignLm5hdi1mb2xkZXItdGl0bGUtY29udGVudCcpO1xuICAgIGlmICghdGl0bGVOb2RlKSB7XG4gICAgICAgIHRpdGxlTm9kZSA9IG5vZGUucXVlcnlTZWxlY3RvcignLm5hdi1maWxlLXRpdGxlLWNvbnRlbnQnKTtcblxuICAgICAgICBpZiAoIXRpdGxlTm9kZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignZWxlbWVudCB3aXRoIHRpdGxlIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXBwbHlTdHlsZVRvRWxlbWVudChub2RlLCB0aXRsZU5vZGUsIGNvbG9yKTtcbn07XG4iLCAiaW1wb3J0IHsgQXBwLCBGdXp6eU1hdGNoLCBGdXp6eVN1Z2dlc3RNb2RhbCwgTW9kYWwsIFNldHRpbmcsIFRleHRDb21wb25lbnQgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgRm9sZGVyQ29sb3JQbHVnaW4gZnJvbSAnLi9tYWluJztcbmltcG9ydCB7IGFkZFRvRE9NIH0gZnJvbSAnLi91dGlsJztcblxuLy9TZWUgaHR0cHM6Ly9naXRodWIuY29tL3ZhbGVudGluZTE5NS9vYnNpZGlhbi1hZG1vbml0aW9uL2Jsb2IvbWFzdGVyL3NyYy9tb2RhbC9pbmRleC50c1xuXG5leHBvcnQgY2xhc3MgQ29sb3JQaWNrZXJNb2RhbDEgZXh0ZW5kcyBNb2RhbCB7XG4gICAgcHVibGljIGNvbG9yOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBwbHVnaW46IEZvbGRlckNvbG9yUGx1Z2luO1xuICAgIHByaXZhdGUgcGF0aDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogRm9sZGVyQ29sb3JQbHVnaW4sIHBhdGg6IHN0cmluZywgY29sb3I6IHN0cmluZykge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuYWRkQ2xhc3MoXCJvYnNpZGlhbi1jb2xvci1mb2xkZXItbW9kYWxcIik7XG4gICAgfVxuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5kaXNwbGF5KHRydWUpO1xuICAgIH1cblxuICAgIG9uQ2xvc2UoKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjb2wgPSB0aGlzLmNvbG9yO1xuXG4gICAgICAgIGFkZFRvRE9NKHRoaXMucGF0aCwgY29sKTtcbiAgICAgICAgdGhpcy5wbHVnaW4uYWRkRm9sZGVyQ29sb3IodGhpcy5wYXRoLCBjb2wpO1xuXG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgZGlzcGxheShmb2N1cz86IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuICAgICAgICBsZXQgdGl0bGVJbnB1dDogVGV4dENvbXBvbmVudDtcblxuICAgICAgICBjb25zdCB0aXRsZVNldHRpbmcgPSBuZXcgU2V0dGluZyhjb250ZW50RWwpO1xuICAgICAgICB0aXRsZVNldHRpbmdcbiAgICAgICAgICAgIC5zZXROYW1lKFwiQ29sb3JcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFwiTGVhdmUgYmxhbmsgdG8gcmVuZGVyIHdpdGhvdXQgYSB0aXRsZS5cIilcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgdGl0bGVJbnB1dCA9IHQ7XG4gICAgICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLmNvbG9yKTtcblxuICAgICAgICAgICAgICAgIHQub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9IHY7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aXRsZUlucHV0LmlucHV0RWwub25rZXlkb3duID0gKGV2dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBldnQua2V5ID09IFwiRW50ZXJcIiAmJiB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5hZGRCdXR0b24oKGIpID0+XG4gICAgICAgICAgICAgICAgYlxuICAgICAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dChcIkluc2VydFwiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0Q3RhKClcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZEV4dHJhQnV0dG9uKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgYi5zZXRJY29uKFwiY3Jvc3NcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJDYW5jZWxcIilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4gdGhpcy5jbG9zZSgpKTtcbiAgICAgICAgICAgICAgICBiLmV4dHJhU2V0dGluZ3NFbC5zZXRBdHRyKFwidGFiaW5kZXhcIiwgMCk7XG4gICAgICAgICAgICAgICAgYi5leHRyYVNldHRpbmdzRWwub25rZXlkb3duID0gKGV2dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBldnQua2V5ID09IFwiRW50ZXJcIiAmJiB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChmb2N1cykge1xuICAgICAgICAgICAgdGl0bGVJbnB1dC5pbnB1dEVsLmZvY3VzKCk7XG4gICAgICAgIH1cblxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbG9yUGlja2VyTW9kYWwgZXh0ZW5kcyBGdXp6eVN1Z2dlc3RNb2RhbDxhbnk+IHtcbiAgICBwcml2YXRlIHBsdWdpbjogRm9sZGVyQ29sb3JQbHVnaW47XG4gICAgcHJpdmF0ZSBwYXRoOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBGb2xkZXJDb2xvclBsdWdpbiwgcGF0aDogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgIH1cblxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgc3VwZXIub25PcGVuKCk7XG4gICAgfVxuXG4gICAgb25DbG9zZSgpIHtcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuICAgIH1cblxuICAgIGdldEl0ZW1UZXh0KGl0ZW06IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIC8vQWJzdHJhY3Qgb3ZlcnJpZGUuXG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cblxuICAgIGdldEl0ZW1zKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIG9uQ2hvb3NlSXRlbShpdGVtOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgYWRkVG9ET00odGhpcy5wYXRoLCBpdGVtKTtcbiAgICAgICAgdGhpcy5wbHVnaW4uYWRkRm9sZGVyQ29sb3IodGhpcy5wYXRoLCBpdGVtKTtcbiAgICB9XG5cbiAgICByZW5kZXJTdWdnZXN0aW9uKGl0ZW06IEZ1enp5TWF0Y2g8c3RyaW5nPiwgZWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIHN1cGVyLnJlbmRlclN1Z2dlc3Rpb24oaXRlbSwgZWwpO1xuXG4gICAgICAgIGlmIChpdGVtLml0ZW0gIT09ICdkZWZhdWx0Jykge1xuICAgICAgICAgICAgZWwuaW5uZXJIVE1MICs9IGA8ZGl2IGNsYXNzPVwib2JzaWRpYW4taWNvbi1mb2xkZXItaWNvbi1wcmV2aWV3XCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAke2l0ZW0uaXRlbX1cIj4mbmJzcDs8L2Rpdj5gO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwgImltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBGb2xkZXJDb2xvclBsdWdpbiBmcm9tICcuL21haW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb2xkZXJDb2xvclNldHRpbmdzVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgcGx1Z2luOiBGb2xkZXJDb2xvclBsdWdpbjtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IEZvbGRlckNvbG9yUGx1Z2luKSB7XG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcblxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICB9XG5cbiAgICBkaXNwbGF5KCk6IHZvaWQge1xuICAgICAgICBsZXQgeyBjb250YWluZXJFbCB9ID0gdGhpcztcblxuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdDb2xvcmVkIEZvbGRlciBTZXR0aW5ncycgfSk7XG5cbiAgICAgICAgLy8gbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgIC8vICAgICAuc2V0TmFtZSgnRW5hYmxlIEV4cGVyaW1lbnRhbCBNb2RlJylcbiAgICAgICAgLy8gICAgIC5zZXREZXNjKCdFbmFibGVzIGV4cGVyaW1lbnRhbCBtb2RlbCcpXG4gICAgICAgIC8vICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgLy8gICAgICAgICAvLyB0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uZ2V0U2V0dGluZ3MoKS5lbmFibGVSZW1peGljb25zTGluZSkub25DaGFuZ2UoYXN5bmMgKHZhbCkgPT4ge1xuICAgICAgICAvLyAgICAgICAgIC8vICAgICB0aGlzLnBsdWdpbi5nZXRTZXR0aW5ncygpLmVuYWJsZVJlbWl4aWNvbnNMaW5lID0gdmFsO1xuICAgICAgICAvLyAgICAgICAgIC8vICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlSWNvbkZvbGRlckRhdGEoKTtcbiAgICAgICAgLy8gICAgICAgICAvLyB9KTtcbiAgICAgICAgLy8gICAgIH0pO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdIaWVyYXJjaGljYWwgTW9kZScpXG4gICAgICAgICAgICAuc2V0RGVzYygnSW4gYEhpZXJhcmNoaWNhbCBNb2RlYCwgY2hpbGQgZm9sZGVycyBhcmUgY29sb3JlZCBiYXNlZCBvbiBwYXJlbnQgc2V0dGluZ3MuJylcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5nZXRTZXR0aW5ncygpLmhpZXJhcmNoaWNhbE1vZGUpLm9uQ2hhbmdlKGFzeW5jICh2YWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZ2V0U2V0dGluZ3MoKS5oaWVyYXJjaGljYWxNb2RlID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlRm9sZGVyQ29sb3JEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmhhbmRsZUNoYW5nZUxheW91dCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUEsdUJBQXNHOzs7QUNLL0YsSUFBTSxtQkFBd0M7QUFBQSxFQUNqRCxPQUFPO0FBQUEsRUFDUCxrQkFBa0I7QUFBQTs7O0FDSnRCLElBQU0sa0JBQWtCO0FBU2pCLElBQU0saUJBQWlCLENBQUMsUUFBeUIsTUFBd0IsNEJBQTZEO0FBRXpJLFFBQU0sZ0JBQWdCLE9BQU8sSUFBSSxVQUFVLGdCQUFnQjtBQUUzRCxnQkFBYyxRQUFRLENBQUMsaUJBQXNCO0FBRXpDLFFBQUksd0JBQXdCLElBQUksZUFBZTtBQUFBO0FBSS9DLDRCQUF3QixJQUFJ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
